plugins {
  id "java-library"
  id "idea"
  id 'maven-publish'

	alias(libs.plugins.lombok)
  alias(libs.plugins.ebean)

  alias(libs.plugins.sonarlint)
  alias(libs.plugins.errorprone)
}
println "[INFO] ${project.group}:${project.name}:$version  â‡’  ${tasks.jar.archiveFileName.get()} # JVM: ${System.getProperty("java.version")}  Gradle: ${gradle.gradleVersion}"

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://jitpack.io" }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  options.compilerArgs.addAll(['-Xlint:all,-serial', '-parameters'])
  options.release.set(17) // javac --release 7..22+
  options.deprecation = true

  options.errorprone {
    enabled = true  // <<<!!! You can disable Error-Prone here!
    disableWarningsInGeneratedCode = true
    excludedPaths = ".*/build/gen.*/.*"
    errorproneArgs = ["-XepExcludedPaths:.*/test/.*"]
  }
}

dependencies {
  errorprone("com.google.errorprone:error_prone_core:latest.release")
	compileOnly(libs.bundles.coreAnnotation)

  api("io.ebean:ebean:latest.release")
  api(libs.hikariCP)
	implementation(libs.bundles.jackson)
	implementation(libs.jakarta.activationApi)
	implementation(libs.jakarta.validationApi)
	implementation(libs.slf4jApi)

	compileOnly("org.eclipse.microprofile.config:microprofile-config-api:latest.release")

  compileOnly libs.micrometerCore


  //*** TEST TEST TEST ***

	testAnnotationProcessor("io.ebean:querybean-generator:latest.release") // vs: annotationProcessor
	testImplementation(libs.bundles.coreAnnotation)

  testImplementation libs.bundles.junit
	testImplementation(libs.testEasyRandom, libs.testEasyRandomValidation)
	testImplementation("io.ebean:ebean-test:latest.release")


  testImplementation("io.ebean:ebean-querybean:latest.release")

	testImplementation("io.ebean:ebean-platform-h2:latest.release")
	testImplementation("io.ebean:ebean-platform-mysql:latest.release")
	testImplementation("io.ebean:ebean-platform-postgres:latest.release")
	testImplementation("io.ebean:ebean-platform-sqlite:latest.release")
	testImplementation("io.ebean:ebean-platform-sqlserver:latest.release")

	testImplementation libs.jdbc.h2
	testImplementation(libs.jdbc.mssql)

	//testRuntimeOnly("org.ow2.asm:asm:9.+")
	testRuntimeOnly("org.eclipse.microprofile.config:microprofile-config-api:latest.release")
	// testImplementation 'io.smallrye.config:smallrye-config:latest.release'
}
// https://tomgregory.com/how-to-exclude-gradle-dependencies/
configurations.configureEach { // .implementation ?
  exclude group: 'io.ebean', module: 'ebean-datasource'

	exclude group: 'io.ebean', module: 'ebean-joda-time'

	exclude group: 'io.ebean', module: 'ebean-platform-all'
	exclude group: 'io.ebean', module: 'ebean-platform-sqlanywhere'
	exclude group: 'io.ebean', module: 'ebean-platform-oracle'
	exclude group: 'io.ebean', module: 'ebean-platform-nuodb'
	exclude group: 'io.ebean', module: 'ebean-platform-mariadb'
	exclude group: 'io.ebean', module: 'ebean-platform-hsqldb'
	exclude group: 'io.ebean', module: 'ebean-platform-hana'
	exclude group: 'io.ebean', module: 'ebean-platform-db2'
	exclude group: 'io.ebean', module: 'ebean-platform-clickhouse'

	exclude group: "commons-logging", module: "commons-logging" // spring?
	exclude group: "org.apache.logging.log4j", module: "log4j-api"
	exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
	exclude group: "org.jboss.slf4j", module:  "slf4j-jboss-logmanager"

	exclude group: "com.mchange", module: "c3p0"
}

ebean {
  debugLevel = 9 //0 - 9
	// queryBeans = true
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
    showStandardStreams = true // show standard out & err of the test JVM on the console
    showExceptions = true
    exceptionFormat = 'full'
  }
  enableAssertions = true
  maxHeapSize = "500m"

  systemProperty("slf4j.detectLoggerNameMismatch", "true")
  systemProperty("file.encoding", "UTF-8")

  systemProperty("user.language", "en")
  Locale.setDefault(new Locale("en", "US"));
}
sonarLint {
  isGeneratedCodeIgnored = true
  ignoreFailures = true
}
lombok { version = "latest.release" }

// https://docs.gradle.org/current/userguide/publishing_maven.html
publishing {
  publications {
    maven(MavenPublication) {
      //groupId in gradle.properties;  artifactId == folder name
      from components.java
			suppressPomMetadataWarningsFor('runtimeElements')
    }
  }
}
java {
  withSourcesJar()
  // withJavadocJar()
}

idea { module { downloadJavadoc = true;	downloadSources = true } }

jar {
	from generatePomFileForMavenPublication {
		rename('pom-default.xml', "META-INF/maven/${project.group}/${project.name}/pom.xml")
	}
}
tasks.withType(AbstractArchiveTask).configureEach {
  preserveFileTimestamps = false
  reproducibleFileOrder = true
}